type Beer implements Node{
	name: String!
	price: Int!
	_id: String!
	createdAt: String!
	info:String
	url: URL
	genre: BeerGenre
}

type Chips implements Node{
	_id: String!
	createdAt: String!
	name: String!
	price: Int!
}

type UserActivity{
	isActive: Boolean
}

type Query{
	userIsActive: Boolean
	activity: UserActivity
	beers: [Beer!] @cache(ttl: 120, scope: PUBLIC)
	products: [Product!]
	testAuth: String! @auth
}

type Mutation{
	addBeer(
		beer: CreateBeer!
	): String
	deleteBeer(
		_id: String!
	): Boolean
	updateBeer(
		beer: UpdateBeer!
		_id: String!
	): Boolean
}

input CreateBeer{
	name: String!
	price: Int!
	url: URL
	genre: BeerGenre
}

interface Node{
	_id: String!
	createdAt: String!
}

input UpdateBeer{
	name: String
	price: Int
	url: URL
}

schema{
	query: Query
	mutation: Mutation
}

union Product = Beer | Chips

enum BeerGenre{
	IPA
	LAGER
	PORTER
}

scalar URL
directive @auth on FIELD_DEFINITION

# Cache directive demo
directive @cache(ttl: Int = 60, scope: CacheScope = PUBLIC) on FIELD_DEFINITION

enum CacheScope {
  PUBLIC
  PRIVATE
}
