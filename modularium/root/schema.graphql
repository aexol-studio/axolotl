type PublicUsersQuery{
	login: LoginQuery!
	getGoogleOAuthLink(
		setup: GetOAuthInput!
	): String!
	getMicrosoftOAuthLink(
		setup: GetOAuthInput!
	): String!
	getGithubOAuthLink(
		setup: GetOAuthInput!
	): String!
	getAppleOAuthLink(
		setup: GetOAuthInput!
	): String!
	requestForForgotPassword(
		username: String!
	): Boolean!
}

input GetOAuthInput{
	scopes: [String!]
	state: String
	redirectUri: String
}

type PublicUsersMutation{
	register(
		user: RegisterInput!
	): RegisterResponse!
	verifyEmail(
		verifyData: VerifyEmailInput!
	): VerifyEmailResponse!
	changePasswordWithToken(
		token: ChangePasswordWithTokenInput!
	): ChangePasswordWithTokenResponse!
	generateOAuthToken(
		tokenData: GenerateOAuthTokenInput!
	): GenerateOAuthTokenResponse!
}

enum EditUserError{
	USERNAME_ALREADY_TAKEN
	FAILED_MONGO_UPDATE
	USER_DOES_NOT_EXIST
}

type EditUserResponse{
	result: Boolean
	hasError: EditUserError
}

enum VerifyEmailError{
	TOKEN_CANNOT_BE_FOUND
}

type VerifyEmailResponse{
	result: Boolean
	hasError: VerifyEmailError
}

enum ChangePasswordWhenLoggedError{
	CANNOT_CHANGE_PASSWORD_FOR_USER_REGISTERED_VIA_SOCIAL
	OLD_PASSWORD_IS_INVALID
	PASSWORD_WEAK
}

type ChangePasswordWhenLoggedResponse{
	result: Boolean
	hasError: ChangePasswordWhenLoggedError
}

enum ChangePasswordWithTokenError{
	CANNOT_CHANGE_PASSWORD_FOR_USER_REGISTERED_VIA_SOCIAL
	TOKEN_IS_INVALID
	PASSWORD_IS_TOO_WEAK
}

type ChangePasswordWithTokenResponse{
	result: Boolean
	hasError: ChangePasswordWithTokenError
}

enum SquashAccountsError{
	YOU_HAVE_ONLY_ONE_ACCOUNT
	YOUR_ACCOUNTS_DO_NOT_HAVE_CONFIRMED_EMAIL
	INCORRECT_PASSWORD
}

enum IntegrateSocialAccountError{
	YOU_HAVE_ONLY_ONE_ACCOUNT
	YOUR_ACCOUNT_DOES_NOT_HANDLE_CHANGE_PASSWORD_MODE
	INCORRECT_PASSWORD
	CANNOT_FIND_USER
	YOUR_ACCOUNT_DOES_NOT_HAVE_CONFIRMED_EMAIL
}

type IntegrateSocialAccountResponse{
	result: Boolean
	hasError: IntegrateSocialAccountError
}

enum DeleteAccountError{
	CANNOT_FIND_USER
	CANNOT_DELETE_ALL_ELEMENTS
}

type DeleteAccountResponse{
	result: Boolean
	hasError: DeleteAccountError
}

enum GenerateOAuthTokenError{
	TOKEN_NOT_GENERATED
	CANNOT_RETRIEVE_USER_INFORMATION_FROM_APPLE
}

type GenerateOAuthTokenResponse{
	result: String
	hasError: GenerateOAuthTokenError
}

input UpdateUserInput{
	username: String
	fullName: String
	avatarUrl: String
}

input GenerateOAuthTokenInput{
	social: SocialKind!
	code: String!
}

input SimpleUserInput{
	username: String!
	password: String!
}

input LoginInput{
	username: String!
	password: String!
}

input VerifyEmailInput{
	token: String!
}

input ChangePasswordWithTokenInput{
	username: String!
	forgotToken: String!
	newPassword: String!
}

input ChangePasswordWhenLoggedInput{
	oldPassword: String!
	newPassword: String!
}

input RegisterInput{
	username: String!
	password: String!
	fullName: String
	invitationToken: String
}

enum SocialKind{
	Google
	Github
	Apple
	Microsoft
}

type LoginQuery{
	password(
		user: LoginInput!
	): LoginResponse!
	provider(
		params: ProviderLoginInput!
	): ProviderLoginQuery!
	"""
	endpoint for refreshing accessToken based on refreshToken
	"""
	refreshToken(
		refreshToken: String!
	): String!
}

input ProviderLoginInput{
	code: String!
	redirectUri: String!
}

type ProviderLoginQuery{
	apple: ProviderResponse
	google: ProviderResponse
	github: ProviderResponse
	microsoft: ProviderResponse
}

enum RegisterErrors{
	USERNAME_EXISTS
	PASSWORD_WEAK
	INVITE_DOMAIN_INCORRECT
	LINK_EXPIRED
	USERNAME_INVALID
}

enum LoginErrors{
	CONFIRM_EMAIL_BEFOR_LOGIN
	INVALID_LOGIN_OR_PASSWORD
	CANNOT_FIND_CONNECTED_USER
	YOU_PROVIDED_OTHER_METHOD_OF_LOGIN_ON_THIS_EMAIL
	UNEXPECTED_ERROR
}

enum ProviderErrors{
	CANNOT_RETRIVE_PROFILE_FROM_GOOGLE_TRY_REFRESH_TOKEN
	CANNOT_FIND_EMAIL_FOR_THIS_PROFIL
	CANNOT_RETRIVE_USER_INFORMATION_FROM_APPLE
	CODE_IS_NOT_EXIST_IN_ARGS
	CANNOT_RETRIVE_SUB_FIELD_FROM_JWT_TOKEN
	CANNOT_RETRIVE_TOKEN_FROM_MICROSOFT
}

type RegisterResponse{
	registered: Boolean
	hasError: RegisterErrors
}

type LoginResponse{
	"""
	same value as accessToken, for delete in future, 
	improvise, adapt, overcome, frontend!
	"""
	login: String
	accessToken: String
	refreshToken: String
	hasError: LoginErrors
}

type ProviderResponse{
	"""
	same value as accessToken, for delete in future, 
	improvise, adapt, overcome, frontend!
	"""
	jwt: String
	accessToken: String
	refreshToken: String
	providerAccessToken: String
	"""
	field describes whether this is first login attempt for this username
	"""
	register: Boolean
	hasError: ProviderErrors
}

schema{
	query: Query
	mutation: Mutation
}

enum GenerateInviteTokenError{
	YOU_ARE_NOT_THE_OWNER_OF_A_TEAM_OR_TEAM_DOES_NOT_EXIST
}

type GenerateInviteTokenResponse{
	result: String
	hasError: GenerateInviteTokenError
}

enum RemoveUserFromTeamError{
	YOU_ARE_NOT_THE_OWNER_OF_A_TEAM_OR_TEAM_DOES_NOT_EXIST
	YOU_CANNOT_KICK_YOURSELF_FROM_THE_TEAM
	USER_NOT_FOUND
}

type RemoveUserFromTeamResponse{
	result: Boolean
	hasError: RemoveUserFromTeamError
}

enum JoinToTeamError{
	TEAM_INVITATION_DOES_NOT_EXIST_OR_CAPTURED
	MEMBER_ALREADY_EXISTS_IN_THE_TEAM
}

type JoinToTeamResponse{
	result: Boolean
	hasError: JoinToTeamError
}

enum CreateTeamError{
	TEAM_NOT_CREATED
}

type CreateTeamResponse{
	result: String
	hasError: CreateTeamError
}

enum JoinToTeamWithInvitationTokenError{
	INVITATION_TOKEN_NOT_FOUND
	TEAM_IN_INVITATION_TOKEN_NOT_SPECIFIED
	MEMBER_ALREADY_EXISTS_IN_THE_TEAM
	INVITATION_TOKEN_EXPIRED
}

type JoinToTeamWithInvitationTokenResponse{
	result: Boolean
	hasError: JoinToTeamWithInvitationTokenError
}

input RemoveUserFromTeamInput{
	userId: String!
}

type InvitationTeamToken{
	teamId: String!
	recipient: String!
	status: InvitationTeamStatus!
	_id: String!
	teamName: String!
}

enum InvitationTeamStatus{
	Waiting
	Taken
}

type Team{
	_id: String!
	name: String!
	owner: User!
	members: [TeamMember!]!
	createdAt: String!
}

type TeamMember{
	_id: String!
	username: String!
	createdAt: String!
	user: User!
	team: Team!
}

type TeamMemberQuery{
	"""
	Retrieves team invitation tokens based on the specified parameters.
	"""
	showTeamInvitations(
		"""
		Determines whether the invitations are sent from the user's team.
		"""
		sentFromMyTeam: Boolean
		"""
		The status of the team invitations.
		"""
		status: InvitationTeamStatus
	): [InvitationTeamToken!]!
	"""
	Retrieves invite tokens.
	"""
	showInviteTokens: [InviteToken!]!
	team: Team!
}

input InviteTokenInput{
	expires: String
	domain: String
	name: String
}

"""
Represents admin member-related mutations.
"""
type TeamMemberMutation{
	"""
	Generates an invite token.
	"""
	generateInviteToken(
		"""
		The token options object.
		"""
		tokenOptions: InviteTokenInput!
	): GenerateInviteTokenResponse!
	"""
	Removes a user from a team.
	"""
	removeUserFromTeam(
		"""
		The remove user from team input object.
		"""
		data: RemoveUserFromTeamInput!
	): RemoveUserFromTeamResponse!
	"""
	Deletes an invite token.
	"""
	deleteInviteToken(
		"""
		The ID of the invite token.
		"""
		id: String!
	): Boolean!
}

type InviteToken{
	token: String!
	expires: String!
	domain: String!
	teamId: String
	_id: String!
	name: String
}

type UsersQuery{
	publicUsers: PublicUsersQuery
	user: AuthorizedUserQuery
}

type UsersMutation{
	publicUsers: PublicUsersMutation
	user: AuthorizedUserMutation
}

interface Dated{
	createdAt: String!
	updatedAt: String!
}

interface Owned{
	user: User!
}

interface StringId{
	_id: String!
}

type SalonProfile implements StringId & Owned & Dated{
	name: String!
	slug: String!
	_id: String!
	user: User!
	createdAt: String!
	updatedAt: String!
	services: [Service!]
}

type SalonOps{
	createService(
		service: CreateService!
	): String
	serviceOps(
		_id: String!
	): ServiceOps
	update(
		salon: UpdateSalon!
	): EntityUpdateResponse
	delete: Boolean
	createVisit(
		visit: CreateVisitFromAdmin!
	): String
	visitOps(
		_id: String!
	): VisitOps
	sendMessage(
		salonClientId: String!
		message: MessageInput!
	): Boolean
}

enum RegistrationError{
	EXISTS_WITH_SAME_NAME
	INVALID_SLUG
	INVALID_NAME
}

type EntityUpdateResponse{
	errors: [RegistrationError!]!
}

input CreateSalon{
	name: String!
	slug: String!
}

input UpdateSalon{
	name: String
	slug: String
}

type SalonClient implements StringId & Dated{
	salon: SalonProfile!
	visits(
		filterDates: DateFilter!
		salonId: String
	): [Visit!]!
	_id: String!
	createdAt: String!
	updatedAt: String!
	messageThread: MessageThread!
	client: Client!
}

type Visit implements StringId & Dated{
	_id: String!
	createdAt: String!
	updatedAt: String!
	service: Service!
	status: VisitStatus!
	whenDateTime: String!
	client: Client!
}

type SalonQuery{
	me: SalonProfile!
	clients: [SalonClient!]!
	visits(
		filterDates: DateFilter!
	): [Visit!]!
	analytics(
		filterDates: DateFilter!
	): SalonAnalytics
	client(
		_id: String!
	): SalonClient
}

input DateFilter{
	from: String!
	to: String
}

type Service implements Dated & StringId{
	salon: SalonProfile!
	approximateDurationInMinutes: String!
	name: String!
	description: String!
	price: Int
	createdAt: String!
	updatedAt: String!
	_id: String!
}

input CreateService{
	approximateDurationInMinutes: String!
	name: String!
	description: String!
	price: Int
}

input UpdateService{
	approximateDurationInMinutes: String
	name: String
	description: String
	price: Int
}

type ServiceOps{
	delete: Boolean
	update(
		service: UpdateService!
	): Boolean
}

enum VisitStatus{
	CREATED
	CONFIRMED
	CANCELED
	RESCHEDULED
	COMPLETED
}

input CreateVisitFromClient{
	whenDateTime: String!
	serviceId: String!
}

input CreateVisitFromAdmin{
	whenDateTime: String!
	serviceId: String!
	clientId: String!
}

input UpdateVisitFromAdmin{
	whenDateTime: String
	serviceId: String
	userId: String
}

type VisitOps{
	update(
		visit: UpdateVisitFromAdmin!
	): VisitResponse
	delete: Boolean
}

type AnalyticsAmountPerDate{
	date: String!
	amount: Int!
}

type SalonAnalytics{
	visitsPerDay: [AnalyticsAmountPerDate!]!
	cashPerDay: [AnalyticsAmountPerDate!]!
}

type ClientQuery{
	clients: [SalonClient!]!
	me: Client!
	client(
		_id: String!
	): SalonClient
}

input CreateClient{
	firstName: String!
	lastName: String!
	email: String
	phone: String
}

input UpdateClient{
	firstName: String
	lastName: String
	email: String
	phone: String
}

type SalonClientOps{
	createVisit(
		visit: CreateVisitFromClient!
	): VisitResponse
	sendMessage(
		message: MessageInput!
	): Boolean
}

type ClientOps{
	update(
		client: UpdateClient!
	): EntityUpdateResponse
	registerToSalon(
		salonSlug: String!
	): Boolean
	salonClientOps(
		_id: String!
	): SalonClientOps
}

enum VisitError{
	INVALID_DATE
}

type VisitResponse{
	errors: [VisitError!]!
}

input MessageInput{
	message: String!
}

type Message implements Dated & StringId{
	createdAt: String!
	updatedAt: String!
	_id: String!
	sender: MessageSender!
	messageThread: MessageThread!
	message: String!
}

union MessageSender = SalonClient | SalonProfile

type MessageThread implements StringId & Dated{
	salonClient: SalonClient!
	messages: [Message!]!
	_id: String!
	createdAt: String!
	updatedAt: String!
}

type Client implements StringId & Dated{
	firstName: String!
	lastName: String!
	email: String
	phone: String
	user: User!
	_id: String!
	createdAt: String!
	updatedAt: String!
}

type Query{
	users: UsersQuery
	housePublic(
		id: String!
	): HousePublicQuery
	houses: [House!]!
}

type Mutation{
	users: UsersMutation
	housePublic(
		id: String!
	): HousePublicMutation
	"""
	create session for simply payment
	"""
	createPaymentSession(
		payload: CreatePaymentSessionInput!
	): String!
}

"""
operations for logged in user, extend this query to perform user actions
"""
type AuthorizedUserQuery{
	me: User
	"""
	Retrieves team invitation tokens based on the specified status.
	"""
	showTeamInvitations(
		"""
		The status of the team invitations.
		"""
		status: InvitationTeamStatus!
	): [InvitationTeamToken!]!
	teams: [Team!]
	teamMember(
		_id: String!
	): TeamMemberQuery
	salon: SalonQuery
	client: ClientQuery
	admin: AdminQuery
}

"""
operations for logged in user, extend this query to perform user actions
"""
type AuthorizedUserMutation{
	changePasswordWhenLogged(
		changePasswordData: ChangePasswordWhenLoggedInput!
	): ChangePasswordWhenLoggedResponse!
	editUser(
		updatedUser: UpdateUserInput!
	): EditUserResponse!
	integrateSocialAccount(
		userData: SimpleUserInput!
	): IntegrateSocialAccountResponse!
	deleteAccount: DeleteAccountResponse!
	"""
	Joins a user to a team.
	"""
	joinToTeam(
		"""
		The ID of the team.
		"""
		teamId: String!
	): JoinToTeamResponse!
	"""
	Joins a user to a team using an invitation token.
	"""
	joinToTeamWithInvitationToken(
		"""
		The invitation token.
		"""
		token: String!
	): JoinToTeamWithInvitationTokenResponse!
	"""
	Creates a team.
	"""
	createTeam(
		"""
		The name of the team.
		"""
		teamName: String!
	): CreateTeamResponse!
	teamMember(
		_id: String!
	): TeamMemberMutation
	registerAsSalon(
		salon: CreateSalon!
	): EntityUpdateResponse
	registerAsClient(
		client: CreateClient!
	): EntityUpdateResponse
	client: ClientOps
	salon: SalonOps
	admin: AdminMutation
}

type User{
	username: String!
	emailConfirmed: Boolean!
	createdAt: String
	fullName: String
	avatarUrl: String
	_id: String!
	updatedAt: String!
}

type PricingRule implements WithId{
	maxDays: Int!
	price: Int!
	season: Season!
	_id: String!
	house: House!
}

type Season implements Nameable & WithId{
	"""
	from date in format MM-DD
	"""
	from: String!
	"""
	to Date in format MM-DD
	"""
	to: String!
	name: String!
	_id: String!
}

type HousePublicQuery{
	house: House!
	getPrice(
		period: DeterminePrice!
	): Int!
	getAvailability(
		year: Int!
	): [Availability!]!
}

input DeterminePrice{
	from: String!
	to: String!
}

type Reservation implements WithId{
	price: Int!
	from: String!
	to: String!
	_id: String!
	house: House!
	paid: Boolean
	guests: Int!
	message: String
	firstName: String!
	lastName: String!
	phone: String!
	email: String!
	status: ReservationStatus!
	address: String
	houseAddons: [HouseAddon!]
}

type HousePublicMutation{
	reserve(
		reservation: CreateReservation!
	): String
}

input CreateReservation{
	from: String!
	to: String!
	guests: Int!
	message: String
	firstName: String!
	lastName: String!
	phone: String!
	email: String!
	address: String
	houseAddons: [String!]
}

input EditReservation{
	from: String
	to: String
	guests: Int!
	message: String
	firstName: String
	lastName: String
	phone: String
	email: String
	status: ReservationStatus
	address: String
	houseAddons: [String!]
}

type Availability{
	date: String!
	booked: Boolean
	start: Boolean
	end: Boolean
	price: Int!
}

type AdminMutation{
	createSeason(
		season: CreateSeason!
	): String
	createHouse(
		house: CreateHouse!
	): String
	houseOps(
		_id: String!
	): AdminHouseOps
	seasonOps(
		_id: String!
	): SeasonOps
	reservationOps(
		_id: String!
	): ReservationOps
	createHouseAddon(
		addon: CreateHouseAddon!
	): String
	addonOps(
		_id: String!
	): HouseAddonOps
	createLandingPage(
		landingPage: CreateLandingPage!
	): String
	landingPageOps(
		_id: String!
	): LandingPageOps
}

type AdminHouseOps{
	delete: Boolean
	update(
		house: EditHouse!
	): Boolean
	pricingRuleOps(
		_id: String!
	): PricingRuleOps
	createPricingRule(
		pricingRule: CreatePricingRule!
	): String
}

type SeasonOps{
	delete: Boolean
	edit(
		season: EditSeason!
	): Boolean
}

type PricingRuleOps{
	delete: Boolean
	update(
		pricingRule: EditPricingRule!
	): Boolean
}

type House implements Nameable & WithId{
	_id: String!
	name: String!
	"""
	If backend cant find the price for the season it will fallback to this price
	"""
	outOfSeasonPrice: Int!
	owner: User!
	addons: [HouseAddon!]
	text: RichText
}

type AdminQuery{
	houses: [House!]!
	houseById(
		_id: String!
	): House
	reservations: [Reservation!]!
	seasons: [Season!]!
	pricingRules: [PricingRule!]!
	me: User!
	addons: [HouseAddon!]
	pages: [LandingPage!]
}

interface Nameable{
	name: String!
}

interface WithId{
	_id: String!
}

input CreateHouse{
	name: String!
	"""
	If backend cant find the price for the season it will fallback to this price
	"""
	outOfSeasonPrice: Int!
	addons: [String!]
	text: RichText
}

input CreatePricingRule{
	maxDays: Int!
	price: Int!
	season: String!
}

input CreateSeason{
	from: String!
	to: String!
	name: String!
}

input EditHouse{
	name: String
	"""
	If backend cant find the price for the season it will fallback to this price
	"""
	outOfSeasonPrice: Int
	addons: [String!]
	text: RichText
}

input EditPricingRule{
	maxDays: Int
	price: Int
	season: String
}

input EditSeason{
	from: String
	to: String
	name: String
}

input CreatePaymentSessionInput{
	amount: Int!
	currency: String!
	successUrl: String!
	cancelUrl: String!
}

type ReservationOps{
	delete: Boolean
	update(
		reservation: EditReservation!
	): Boolean
}

enum ReservationStatus{
	PENDING
	PAID
}

type HouseAddon implements WithId{
	name: String!
	price: Int!
	_id: String!
	perDay: Boolean
}

input CreateHouseAddon{
	name: String!
	price: Int!
	perDay: Boolean
}

input UpdateHouseAddon{
	name: String
	price: Int
	perDay: Boolean
}

type HouseAddonOps{
	update(
		addon: UpdateHouseAddon!
	): Boolean
	delete: Boolean
}

"""
Node to hold rich text in some format that has a react renderer
"""
scalar RichText

type LandingPage{
	houses: [House!]
	domain: String
	slug: String!
	description: String!
	generatedCode: GeneratedCode
}

scalar GeneratedCode

input CreateLandingPage{
	domain: String
	slug: String!
	description: String!
	generatedCode: GeneratedCode
}

input UpdateLandingPage{
	domain: String
	slug: String
	description: String
}

type LandingPageOps{
	delete: Boolean
	update(
		landingPage: UpdateLandingPage!
	): Boolean
}
